import { print } from "graphql";
import type { GraphQLClient } from "graphql-request";
import gql from "graphql-tag";
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded date */
  ISO8601Date: string;
};

/** Autogenerated input type of CreateEvent */
export type CreateEventInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  eventDate: Scalars["ISO8601Date"];
  participants: Array<Scalars["String"]>;
};

/** Autogenerated return type of CreateEvent */
export type CreateEventPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  event: Event;
};

/** Autogenerated input type of CreateGame */
export type CreateGameInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  eventToken: Scalars["String"];
  results: Array<GameResultInput>;
};

/** Autogenerated return type of CreateGame */
export type CreateGamePayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  game: Game;
};

/** Autogenerated input type of DeleteGame */
export type DeleteGameInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  eventToken: Scalars["String"];
  gameId: Scalars["Int"];
};

/** Autogenerated return type of DeleteGame */
export type DeleteGamePayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of DeleteTip */
export type DeleteTipInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  eventToken: Scalars["String"];
};

/** Autogenerated return type of DeleteTip */
export type DeleteTipPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

export type Event = {
  eventDate: Scalars["ISO8601Date"];
  games: Array<Game>;
  participants: Array<Participant>;
  tip?: Maybe<Tip>;
  token: Scalars["String"];
};

export type Game = {
  id: Scalars["Int"];
  results: Array<GameResult>;
};

export type GameResult = {
  participantId: Scalars["Int"];
  rank: Scalars["Int"];
  score: Scalars["Float"];
};

export type GameResultInput = {
  participantId: Scalars["Int"];
  score: Scalars["Float"];
};

export type Mutation = {
  createEvent?: Maybe<CreateEventPayload>;
  createGame?: Maybe<CreateGamePayload>;
  deleteGame?: Maybe<DeleteGamePayload>;
  deleteTip?: Maybe<DeleteTipPayload>;
  updateEvent?: Maybe<UpdateEventPayload>;
  updateGame?: Maybe<UpdateGamePayload>;
  updateParticipants?: Maybe<UpdateParticipantsPayload>;
  upsertTip?: Maybe<UpsertTipPayload>;
};

export type MutationCreateEventArgs = {
  input: CreateEventInput;
};

export type MutationCreateGameArgs = {
  input: CreateGameInput;
};

export type MutationDeleteGameArgs = {
  input: DeleteGameInput;
};

export type MutationDeleteTipArgs = {
  input: DeleteTipInput;
};

export type MutationUpdateEventArgs = {
  input: UpdateEventInput;
};

export type MutationUpdateGameArgs = {
  input: UpdateGameInput;
};

export type MutationUpdateParticipantsArgs = {
  input: UpdateParticipantsInput;
};

export type MutationUpsertTipArgs = {
  input: UpsertTipInput;
};

export type Participant = {
  id: Scalars["Int"];
  name: Scalars["String"];
};

export type ParticipantRenameInput = {
  id: Scalars["Int"];
  name: Scalars["String"];
};

export type Query = {
  event: Event;
};

export type QueryEventArgs = {
  token: Scalars["String"];
};

export type Tip = {
  results: Array<TipResult>;
};

export type TipResult = {
  participantId: Scalars["Int"];
  score: Scalars["Float"];
};

export type TipResultInput = {
  participantId: Scalars["Int"];
  score: Scalars["Float"];
};

/** Autogenerated input type of UpdateEvent */
export type UpdateEventInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  eventDate: Scalars["ISO8601Date"];
  eventToken: Scalars["String"];
};

/** Autogenerated return type of UpdateEvent */
export type UpdateEventPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  event: Event;
};

/** Autogenerated input type of UpdateGame */
export type UpdateGameInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  eventToken: Scalars["String"];
  gameId: Scalars["Int"];
  results: Array<GameResultInput>;
};

/** Autogenerated return type of UpdateGame */
export type UpdateGamePayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  game: Game;
};

/** Autogenerated input type of UpdateParticipants */
export type UpdateParticipantsInput = {
  addingNames?: Maybe<Array<Scalars["String"]>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  deletingIds?: Maybe<Array<Scalars["Int"]>>;
  eventToken: Scalars["String"];
  renamingParticipants?: Maybe<Array<ParticipantRenameInput>>;
};

/** Autogenerated return type of UpdateParticipants */
export type UpdateParticipantsPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  participants: Array<Participant>;
};

/** Autogenerated input type of UpsertTip */
export type UpsertTipInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  eventToken: Scalars["String"];
  results: Array<TipResultInput>;
};

/** Autogenerated return type of UpsertTip */
export type UpsertTipPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  tip: Tip;
};

export type CreateEventMutationVariables = {
  eventDate: Scalars["ISO8601Date"];
  participants: Array<Scalars["String"]>;
};

export type CreateEventMutation = { createEvent?: Maybe<{ event: { token: string } }> };

export type CreateGameMutationVariables = {
  eventToken: Scalars["String"];
  results: Array<GameResultInput>;
};

export type CreateGameMutation = {
  createGame?: Maybe<{ game: { id: number; results: Array<{ participantId: number; score: number; rank: number }> } }>;
};

export type DeleteGameMutationVariables = {
  eventToken: Scalars["String"];
  gameId: Scalars["Int"];
};

export type DeleteGameMutation = { deleteGame?: Maybe<{ clientMutationId?: Maybe<string> }> };

export type DeleteTipMutationVariables = {
  eventToken: Scalars["String"];
};

export type DeleteTipMutation = { deleteTip?: Maybe<{ clientMutationId?: Maybe<string> }> };

export type UpdateEventMutationVariables = {
  eventToken: Scalars["String"];
  eventDate: Scalars["ISO8601Date"];
  participants: Array<ParticipantRenameInput>;
};

export type UpdateEventMutation = {
  updateEvent?: Maybe<{ event: { token: string } }>;
  updateParticipants?: Maybe<{ participants: Array<{ id: number }> }>;
};

export type UpdateGameMutationVariables = {
  eventToken: Scalars["String"];
  gameId: Scalars["Int"];
  results: Array<GameResultInput>;
};

export type UpdateGameMutation = { updateGame?: Maybe<{ clientMutationId?: Maybe<string> }> };

export type UpsertTipMutationVariables = {
  eventToken: Scalars["String"];
  results: Array<TipResultInput>;
};

export type UpsertTipMutation = { upsertTip?: Maybe<{ clientMutationId?: Maybe<string> }> };

export type GetEventQueryVariables = {
  token: Scalars["String"];
};

export type GetEventQuery = {
  event: {
    token: string;
    eventDate: string;
    participants: Array<{ id: number; name: string }>;
    games: Array<{ id: number; results: Array<{ participantId: number; score: number; rank: number }> }>;
    tip?: Maybe<{ results: Array<{ participantId: number; score: number }> }>;
  };
};

export const CreateEventDocument = gql`
  mutation createEvent($eventDate: ISO8601Date!, $participants: [String!]!) {
    createEvent(input: { eventDate: $eventDate, participants: $participants }) {
      event {
        token
      }
    }
  }
`;
export const CreateGameDocument = gql`
  mutation createGame($eventToken: String!, $results: [GameResultInput!]!) {
    createGame(input: { eventToken: $eventToken, results: $results }) {
      game {
        id
        results {
          participantId
          score
          rank
        }
      }
    }
  }
`;
export const DeleteGameDocument = gql`
  mutation deleteGame($eventToken: String!, $gameId: Int!) {
    deleteGame(input: { eventToken: $eventToken, gameId: $gameId }) {
      clientMutationId
    }
  }
`;
export const DeleteTipDocument = gql`
  mutation deleteTip($eventToken: String!) {
    deleteTip(input: { eventToken: $eventToken }) {
      clientMutationId
    }
  }
`;
export const UpdateEventDocument = gql`
  mutation updateEvent($eventToken: String!, $eventDate: ISO8601Date!, $participants: [ParticipantRenameInput!]!) {
    updateEvent(input: { eventToken: $eventToken, eventDate: $eventDate }) {
      event {
        token
      }
    }
    updateParticipants(input: { eventToken: $eventToken, renamingParticipants: $participants }) {
      participants {
        id
      }
    }
  }
`;
export const UpdateGameDocument = gql`
  mutation updateGame($eventToken: String!, $gameId: Int!, $results: [GameResultInput!]!) {
    updateGame(input: { eventToken: $eventToken, gameId: $gameId, results: $results }) {
      clientMutationId
    }
  }
`;
export const UpsertTipDocument = gql`
  mutation upsertTip($eventToken: String!, $results: [TipResultInput!]!) {
    upsertTip(input: { eventToken: $eventToken, results: $results }) {
      clientMutationId
    }
  }
`;
export const GetEventDocument = gql`
  query getEvent($token: String!) {
    event(token: $token) {
      token
      eventDate
      participants {
        id
        name
      }
      games {
        id
        results {
          participantId
          score
          rank
        }
      }
      tip {
        results {
          participantId
          score
        }
      }
    }
  }
`;

export type SdkFunctionWrapper = <T>(action: () => Promise<T>) => Promise<T>;

const defaultWrapper: SdkFunctionWrapper = (sdkFunction) => sdkFunction();
export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {
  return {
    createEvent(variables: CreateEventMutationVariables): Promise<CreateEventMutation> {
      return withWrapper(() => client.request<CreateEventMutation>(print(CreateEventDocument), variables));
    },
    createGame(variables: CreateGameMutationVariables): Promise<CreateGameMutation> {
      return withWrapper(() => client.request<CreateGameMutation>(print(CreateGameDocument), variables));
    },
    deleteGame(variables: DeleteGameMutationVariables): Promise<DeleteGameMutation> {
      return withWrapper(() => client.request<DeleteGameMutation>(print(DeleteGameDocument), variables));
    },
    deleteTip(variables: DeleteTipMutationVariables): Promise<DeleteTipMutation> {
      return withWrapper(() => client.request<DeleteTipMutation>(print(DeleteTipDocument), variables));
    },
    updateEvent(variables: UpdateEventMutationVariables): Promise<UpdateEventMutation> {
      return withWrapper(() => client.request<UpdateEventMutation>(print(UpdateEventDocument), variables));
    },
    updateGame(variables: UpdateGameMutationVariables): Promise<UpdateGameMutation> {
      return withWrapper(() => client.request<UpdateGameMutation>(print(UpdateGameDocument), variables));
    },
    upsertTip(variables: UpsertTipMutationVariables): Promise<UpsertTipMutation> {
      return withWrapper(() => client.request<UpsertTipMutation>(print(UpsertTipDocument), variables));
    },
    getEvent(variables: GetEventQueryVariables): Promise<GetEventQuery> {
      return withWrapper(() => client.request<GetEventQuery>(print(GetEventDocument), variables));
    },
  };
}
export type Sdk = ReturnType<typeof getSdk>;
